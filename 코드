# 하트는 목숨이 1개일 시에만 떨어짐

!pip install pygame
pip install --upgrade pip
import pygame
import random
import time

pygame.init()

# 색상 정의
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# 화면 크기 설정
size = (400, 600)
screen = pygame.display.set_mode(size)

# Pygame Clock 객체 생성
clock = pygame.time.Clock()

# 이미지 로드 및 크기 조정
airplane = pygame.image.load('images/plane.png')
airplane = pygame.transform.scale(airplane, (60, 45))
fruit1 = pygame.image.load('images/fruit1.png')
fruit1 = pygame.transform.scale(fruit1, (30, 30))
fruit2 = pygame.image.load('images/fruit2.png')
fruit2 = pygame.transform.scale(fruit2, (30, 30))
ddong = pygame.image.load('images/ddong.png')
ddong = pygame.transform.scale(ddong, (30, 30))
hart = pygame.image.load('images/hart.png')
hart = pygame.transform.scale(hart, (30, 30))

# 폰트 설정
font = pygame.font.SysFont(None, 36)

# 장애물 클래스 정의
class Obstacle:
    def __init__(self, x, y, image, speed):
        self.x = x
        self.y = y
        self.image = image
        self.speed = speed
    
    def move(self):
        self.y += self.speed
    
    def draw(self):
        screen.blit(self.image, (self.x, self.y))
    
    def reset_pos(self):
        self.x = random.randint(0, size[0] - self.image.get_width())
        self.y = -self.image.get_height()
        self.speed = random.randint(3, 6)

# 장애물 생성 함수 정의
def create_obstacle(lives):
    if lives == 1:
        obstacle_type = random.choices([fruit1, fruit2, ddong, hart], [0.35, 0.35, 0.5, 0.1])[0]
    else:
        obstacle_type = random.choices([fruit1, fruit2, ddong], [0.4, 0.4, 0.5])[0]
    obstacle = Obstacle(random.randint(0, size[0] - 30), -30, obstacle_type, random.randint(3, 6))
    return obstacle

# 게임 실행 함수 정의
def runGame():
    x = 20
    y = size[1] - 45
    speed = 5
    score = 0
    lives = 3
    start_time = time.time()
    time_limit = 300  # 5분 = 300초

    # 장애물 리스트 생성
    obstacles = [create_obstacle(lives) for _ in range(5)]

    done = False
  
    while not done:
        clock.tick(30)
        screen.fill(WHITE)
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True

        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            x -= speed
        if keys[pygame.K_RIGHT]:
            x += speed

        if x < 0:
            x = 0
        elif x > size[0] - 60:
            x = size[0] - 60

        # 장애물 이동 및 충돌 처리
        for obstacle in obstacles:
            obstacle.move()
            if obstacle.y > size[1]:
                obstacles.remove(obstacle)
                obstacles.append(create_obstacle(lives))
            
            if x < obstacle.x < x + 60 and y < obstacle.y < y + 45:
                if obstacle.image in [fruit1, fruit2]:
                    score += 10
                elif obstacle.image == ddong:
                    lives -= 1
                    if lives == 0:
                        done = True
                elif obstacle.image == hart:
                    lives = min(lives + 1, 3)  # 생명은 최대 3개까지 증가
                obstacles.remove(obstacle)
                obstacles.append(create_obstacle(lives))

            obstacle.draw()

        screen.blit(airplane, (x, y))

        elapsed_time = time.time() - start_time
        remaining_time = max(0, time_limit - elapsed_time)
        if remaining_time == 0:
            done = True

        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)

        score_text = font.render(f'Score: {score}', True, BLACK)
        lives_text = font.render(f'Lives: {lives}', True, BLACK)
        time_text = font.render(f'Time: {minutes:02}:{seconds:02}', True, BLACK)
        
        screen.blit(score_text, (10, 10))
        screen.blit(lives_text, (300, 10))
        screen.blit(time_text, (150, 10))
        
        pygame.display.update()

runGame()
pygame.quit()
