# 하트는 목숨이 1개일 시에만 떨어짐


import pygame
import random
import time

pygame.init()

# 색상 정의
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

# 화면 크기 설정
size = (400, 600)
screen = pygame.display.set_mode(size)

# Pygame Clock 객체 생성
clock = pygame.time.Clock()

# 이미지 로드 및 크기 조정
cat = pygame.image.load('images/CAT.png')
cat = pygame.transform.scale(cat, (60, 45))
fruit1 = pygame.image.load('images/fruit1.png')
fruit1 = pygame.transform.scale(fruit1, (30, 30))
fruit2 = pygame.image.load('images/fruit2.png')
fruit2 = pygame.transform.scale(fruit2, (30, 30))
fruit3 = pygame.image.load('images/fruit3.png')
fruit3 = pygame.transform.scale(fruit3, (30, 30))
fruit4 = pygame.image.load('images/fruit4.png')
fruit4 = pygame.transform.scale(fruit4, (30, 30))
fruit5 = pygame.image.load('images/fruit5.png')
fruit5 = pygame.transform.scale(fruit5, (30, 30))
ddong = pygame.image.load('images/ddong.png')
ddong = pygame.transform.scale(ddong, (30, 30))
hart = pygame.image.load('images/hart.png')
hart = pygame.transform.scale(hart, (30, 30))

# 폰트 설정
font = pygame.font.SysFont(None, 36)

# 장애물 클래스 정의
class Obstacle:
    def __init__(self, x, y, image, speed):
        self.x = x #障害物の横移動
        self.y = y #障害物の縦移動
        self.image = image #障害物の画像
        self.speed = speed #障害物の移動速度
     
    
    def move(self):
        self.y += self.speed #障害物の縦移動を速度分だけ下に移動させる
    
    def draw(self):
        screen.blit(self.image, (self.x, self.y)) #現在の位置を障害物に描写させる
    
    def reset_pos(self):
        self.x = random.randint(0, size[0] - self.image.get_width()) #横移動をランダムに設定
        self.y = -self.image.get_height() #縦位置を画面外の上部外に設定
        self.speed = random.randint(3, 6) #速度をランダムに設定

# 장애물 생성 함수 정의
def create_obstacle(lives):
    if lives == 1: #ライフが1の時 フルール1,35% フルーツ2,35% うんこ,50% ハート,10%の確立で出現する
        obstacle_type = random.choices([fruit1, fruit2, fruit3, fruit4, fruit5, ddong, hart], [0.35, 0.35, 0.35, 0.35, 0.35, 0.5, 0.1])[0]
    else: #ライフが1以上の時
        obstacle_type = random.choices([fruit1, fruit2, fruit3, fruit4, fruit5, ddong], [0.4, 0.4, 0.4, 0.4, 0.4, 0.5])[0]
    obstacle = Obstacle(random.randint(0, size[0] - 30), -30, obstacle_type, random.randint(3, 6))
    return obstacle

# 게임 실행 함수 정의 ゲームの初期設定
def runGame():
    x = 20 #飛行機の初期横位置
    y = size[1] - 45 #飛行機の初期縦位置
    speed = 5 #飛行機の移動速度
    score = 0 #初期スコア
    lives = 3 #初期ライフ
    start_time = time.time() #ゲーム開始時間
    time_limit = 100  # 5분 = 300초 #ゲーム時間

    # 장애물 리스트 생성
    obstacles = [create_obstacle(lives) for _ in range(9)] #初期障害物5つを生成 スタートの障害物の数

    done = False #ゲームループの制御フラグ
  
    while not done:
        clock.tick(30) #30フレーム
        screen.fill(WHITE) #画面を白でクリア
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                done = True #ウインドウの閉じるボタンが押されたらゲーム終了

        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]: #左キーが押された場合、左に移動
            x -= speed          
        if keys[pygame.K_RIGHT]:
            x += speed          #右キーが押された場合、右に移動

        if x < 0:
            x = 0               #画面の左端を超えないように制御
        elif x > size[0] - 60:
            x = size[0] - 60    #画面の右端を超えないように制御

        # 장애물 이동 및 충돌 처리
        for obstacle in obstacles:
            obstacle.move() #障害物を移動
            if obstacle.y > size[1]:
                obstacles.remove(obstacle)
                obstacles.append(create_obstacle(lives)) #画面外に出た障害物をリセット
            
            if x < obstacle.x < x + 60 and y < obstacle.y < y + 45:
                if obstacle.image in [fruit1, fruit2, fruit3, fruit4, fruit5]:
                    score += 10 #フルーツの衝突でスコアを加算
                elif obstacle.image == ddong:
                    lives -= 1  #うんこの衝突でライフを減少
                    if lives == 0:
                        done = True #ライフが0になったらゲームオーバー
                elif obstacle.image == hart:
                    lives = min(lives + 1, 3)  # ハートの衝突でライフを1増加 생명은 최대 3개까지 증가
                obstacles.remove(obstacle)
                obstacles.append(create_obstacle(lives)) #衝突後、新しい障害物を生成

            obstacle.draw() #障害物を描写

        screen.blit(cat, (x, y)) #飛行機の現在の位置を描写

        elapsed_time = time.time() - start_time
        remaining_time = max(0, time_limit - elapsed_time)
        if remaining_time == 0:
            done = True #時間切れでゲームオーバー

        minutes = int(remaining_time // 60)
        seconds = int(remaining_time % 60)

        score_text = font.render(f'Score: {score}', True, BLACK) #画面に表示
        lives_text = font.render(f'Lives: {lives}', True, BLACK)
        time_text = font.render(f'Time: {minutes:02}:{seconds:02}', True, BLACK)
        
        screen.blit(score_text, (10, 10))
        screen.blit(lives_text, (300, 10))
        screen.blit(time_text, (150, 10))
        
        pygame.display.update() #画面の更新して描写内容を反映させる

runGame()
pygame.quit()
